@page "/Play"
@inject IJSRuntime JSRuntime

<canvas id="canvas" ref="_canvas" width="450" height="450" onclick="@CanvasClick"></canvas>

@functions 
{
    [Parameter]
    string GameID { get; set; }

    bool _loaded = false;

    static ElementRef _canvas;

    static GameEngine _gameEngine;

    void CanvasClick(UIMouseEventArgs e)
    {
        Console.WriteLine("CanvasClick: X: " + e.ClientX + ", Y: " + e.ClientY);
    }

    protected override async Task OnInitAsync()
    {
        await base.OnInitAsync();

        if (_gameEngine == null)
        {
            _gameEngine = new GameEngine();
            _gameEngine.ExecuteDraw = async (boardData) =>
            {
                await JSRuntime.InvokeAsync<object>("draw", boardData);
            };
        }
    }

    protected override async Task OnAfterRenderAsync()
    {
        await base.OnAfterRenderAsync();
        if (!_loaded)
        {
            _loaded = true;
            await JSRuntime.InvokeAsync<object>("initializeView", _canvas);
            await JSRuntime.InvokeAsync<object>("draw", null);
        }
    }

    [JSInvokable]
    public static async void CanvasClickReceived(int column, int row)
    {
        await _gameEngine.CanvasClickAsync(column, row);
    }
}
